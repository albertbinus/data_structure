// C++ program for the above approach.
#include <bits/stdc++.h>
using namespace std;

// Function to remove an element from
// the queue
void remove(int t, queue<int>& q)
{

	// Helper queue to store the elements
	// temporarily.
	queue<int> ref;
	int s = q.size();
	int cnt = 0;

	// Finding the value to be removed
	while (q.front() != t and !q.empty()) {
		ref.push(q.front());
		q.pop();
		cnt++;
	}

	// If element is not found
	if (q.empty()) {
		cout << "element not found!!" << endl;
		while (!ref.empty()) {

			// Pushing all the elements back into q
			q.push(ref.front());
			ref.pop();
		}
	}

	// If element is found
	else {
		q.pop();
		while (!ref.empty()) {

			// Pushing all the elements back into q
			q.push(ref.front());
			ref.pop();
		}
		int k = s - cnt - 1;
		while (k--) {

			// Pushing elements from front of q to its back
			int p = q.front();
			q.pop();
			q.push(p);
		}
	}
}

// Function to print all the elements
// of the queue.
void print(queue<int> qr)
{
	while (!qr.empty()) {
		cout << qr.front() << " ";
		qr.pop();
	}
	cout << endl;
}

// Driver Code
int main()
{
	queue<int> q;

	// Pushing
	q.push(67);
	q.push(8);
	q.push(31);
	q.push(55);
	q.push(70);
	q.push(3);
	q.push(81);
	q.push(47);
	q.push(29);
	q.push(62);
	q.push(45);
	print(q);
	
	// Removing
	remove(81, q);
	print(q);

	return 0;
}

